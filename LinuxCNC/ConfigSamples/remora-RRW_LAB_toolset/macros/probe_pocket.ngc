(author: Julian Koenig; Originally by Chris P - Probe Basic)
(version: 2.0)
(date: 05.06.2024)

(Probe round pocket center start measure x and y Diam, find xy center position)
(Start probe position is rough center of pocket a safe distance below top edge)
(no z move will be initiated in this routine. end position is hole center)

o<probe_pocket> sub
  #<probe_mode>          = #1   (0 for setting WC0; 1 for not setting WC0)
  #<cal_mode>            = #3  (0 for normal; 1 for used while calibration) 
  #<xy_clearance>        = #<_ini[probe]XY_CLEARANCE>
  #<max_xy_distance>     = #<_ini[probe]MAX_XY_DISTANCE>
  #<probe_slow_fr>       = #<_ini[probe]VEL_SLOW>
  #<probe_fast_fr>       = #<_ini[probe]VEL_FAST>
  #<probe_ff>            = #<_ini[probe]VEL_FF>
  #<diameter_hint>       = #<_hal[pyvcp.probe_diameter]>
  
  #<tip_diameter>        = #5410
  #<add_probetrips>      = #2 (0 or not defined means one trip)
  #<ff_distance>         = 5 (5 mm distance to contact with fast forward speed)
  
  #<x_offset>            = #5401
  #<y_offset>            = #5402
  #<probe_range_x>       = #5411
  #<probe_range_y>       = #5412

  (Probe tool safety checks)
  o100 if [#3 EQ 0] (if #3 EQ 1 then safety checks already done by calibration sub)
    o<probe_safety_checks> call [0]
    o101 if [#<_value> EQ 0]
      o<probe_pocket> return
    o101 endif
  o100 endif
  

  (If probe for rotation set rotation to 0)
  o102 if [[#1999 EQ 21] OR [#1999 EQ 22]]   
    G10 L2 P#5220 R0
  o102 endif



  (Cancel G92 offsets)  (#1999 = 31 or 32 doesnt matter!)
  G92.1

  #<workspace_x> = #[5201 + [20 * #5220]]
  #<workspace_y> = #[5202 + [20 * #5220]]




  (Call sub "probe_x_minus" to Probe x-)
  o<probe_x_minus> call [[#<diameter_hint> - #<tip_diameter>] / 2][1][0][1]
  #<x_minus_probed> = #1000
  
  G91
  F[#<probe_ff>]
  o200 if [[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]] GT 0]
    G38.3 X[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]]
  o200 endif




  (Call sub "probe_x_plus" to Probe x+)
  o<probe_x_plus> call [#<ff_distance> + #<xy_clearance>][1][0][1]
  #<x_plus_probed> = #1000

  (probed center calculation)
  #<x_center_probed> = [[#<x_plus_probed> + #<x_minus_probed>] / 2]
  #1002 = #<x_center_probed>

  (Probe Completion Move to X Zero)
  G90
  F[#<probe_ff>]
  G38.3 X[#<x_center_probed>]


  
  
  (Call sub "probe_y_plus" to Probe Y+)
  o<probe_y_plus> call [[#<diameter_hint> - #<tip_diameter>] / 2][1][0][1]
  #<y_plus_probed> = #1000
  
  G91
  F[#<probe_ff>]
  o201 if [[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]] GT 0]
    G38.3 Y-[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]]
  o201 endif




  (Call sub "probe_y_minus" to Probe Y-)
  o<probe_y_minus> call [#<ff_distance> + #<xy_clearance>][1][0][1]
  #<y_minus_probed> = #1000

  (probed center calculation)
  #<y_center_probed> = [[#<y_plus_probed> + #<y_minus_probed>] / 2]
  #1004 = #<y_center_probed>

  (Probe Completion Move to Y Zero)
  G90
  F[#<probe_ff>]
  G38.3 Y[#<y_center_probed>]




  G91
  F[#<probe_ff>]
  o202 if [[[#<diameter_hint> / 2]- [#<tip_diameter> / 2] - #<ff_distance> - #<xy_clearance>] GT 0]
    G38.3 X-[[#<diameter_hint> / 2]- [#<tip_diameter> / 2] - #<ff_distance> - #<xy_clearance>]
  o202 endif

  (Call sub "probe_x_minus" to Probe x-)
  o<probe_x_minus> call [#<ff_distance> + #<xy_clearance>][1][#<add_probetrips>][1]
  #<x_minus_probed> = #1000

  G91
  F[#<probe_ff>]
  o203 if [[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]] GT 0]
    G38.3 X[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]]
  o203 endif




  (Call sub "probe_x_plus" to Probe x+)
  o<probe_x_plus> call [#<ff_distance> + #<xy_clearance>][1][#<add_probetrips>][1]
  #<x_plus_probed> = #1000

  (probed center calculation)
  #<x_center_probed> = [[#<x_plus_probed> + #<x_minus_probed>] / 2]

  (calculate X Width Probed)
  #<raw_width> = [#<x_plus_probed> - #<x_minus_probed>]

  (Completed probed width calculations)
  #<x_probed_width> = [#<raw_width> + #<probe_range_x>]
  #1001 = #<x_probed_width>
  #1002 = #<x_center_probed>
  
  G90
  F[#<probe_ff>]
  G38.3 X[#<x_center_probed>]




  G91
  F[#<probe_ff>]
  o204 if [[[#<diameter_hint> / 2]- [#<tip_diameter> / 2] - #<ff_distance> - #<xy_clearance>] GT 0]
    G38.3 Y[[#<diameter_hint> / 2]- [#<tip_diameter> / 2] - #<ff_distance> - #<xy_clearance>]
  o204 endif

  (Call sub "probe_y_plus" to Probe Y+)
  o<probe_y_plus> call [#<ff_distance> + #<xy_clearance>][1][#<add_probetrips>][1]
  #<y_plus_probed> = #1000
  



  G91
  F[#<probe_ff>]
  o205 if [[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]] GT 0]
    G38.3 Y-[#<diameter_hint> - #<tip_diameter> - #<ff_distance> - [2 * #<xy_clearance>]]
  o205 endif




  (Call sub "probe_y_minus" to Probe Y-)
  o<probe_y_minus> call [#<ff_distance> + #<xy_clearance>][1][#<add_probetrips>][1]
  #<y_minus_probed> = #1000

  (probed center calculation)
  #<y_center_probed> = [[#<y_plus_probed> + #<y_minus_probed>] / 2]

  (calculate Y Width Probed)
  #<raw_width> = [#<y_plus_probed> - #<y_minus_probed>]

  (Completed probed diameter calculations)
  #<y_probed_width> = [#<raw_width> + #<probe_range_y>]
  #1003 = #<y_probed_width>
  #1004 = #<y_center_probed>
  
  #<averaged_diam> = [[#<x_probed_width> + #<y_probed_width>] / 2]
  #1000 = #<averaged_diam>
  
  G90
  F[#<probe_ff>]
  G38.3 Y[#<y_center_probed>]


  (probe mode rule for WCO or probe position measuring only)
  o110 if [#<probe_mode> EQ 0]

    o140 if [#1999 EQ 12] (midpoint 2. probe)
      G10 L2 P#5220 X[[[#<x_center_probed>] / 2] + #<workspace_x>]
      G10 L2 P#5220 Y[[[#<y_center_probed>] / 2] + #<workspace_y>]
      M130 P254 (clear messages)
      #1999 = 0
      M130 P[#1999] (send state to hal)
      o141 if [[#<_hal[pyvcp.reload]>] EQ 1]
        M130 P255 (clear plot and reload file)
      o141 endif
      #<distance_total> = SQRT[[[#<x_center_probed>]*[#<x_center_probed>]]+[[#<y_center_probed>]*[#<y_center_probed>]]]     
      (debug,Distance to pocket - X /Y //vector length:        , %.3f#<x_center_probed> /%.3f#<y_center_probed> //%.3f#<distance_total>)
      o<probe_pocket> return
    o140 endif
    
    o150 if [#1999 EQ 22] (rotation 2. probe)
      #<angle> = ATAN[#<y_center_probed>] / [#<x_center_probed>]
      (#<angle> = ATAN[#<x_center_probed>] / [#<y_center_probed>])
      G10 L2 P#5220 R[#<angle>]
      M130 P254 (clear messages)
      #1999 = 0
      M130 P[#1999] (send state to hal)
      o151 if [[#<_hal[pyvcp.reload]>] EQ 1]
        M130 P255 (clear plot and reload file)
      o151 endif
      #<angle_to_y> = [-90 + #<angle>]
      (debug,Angle of system set to %.2f#<angle>. If you need to have the Y-axis pointing to the second point use: G10 L2 P0 R%.2f#<angle_to_y>.)
      o<probe_pocket> return
    o150 endif

    o160 if [#1999 EQ 31] (distance mode measuring)
      G52 X[#<x_center_probed>] Y[#<y_center_probed>]
      (5211-5219 - Shared "G52" and "G92" offset for X, Y, Z, A, B, C, U, V & W)
      #<distance_total> = SQRT[[[#5211]*[#5211]]+[[#5212]*[#5212]]+[[#5213]*[#5213]]]
      (debug,X / Y /Z //vector length:                                     , %.3f#5211 /%.3f#5212 /%.3f#5213 //%.3f#<distance_total>)
      (debug,Probed diameter: #1000.)
      (debug,Click again for LOGGING mode. Your prior      , logfile will be ERASED.)
      o<probe_pocket> return
    o160 endif

    o161 if [#1999 EQ 32] (distance mode logging)
      G52 X[#<x_center_probed>] Y[#<y_center_probed>]
      #<distance_total> = SQRT[[[#5211]*[#5211]]+[[#5212]*[#5212]]+[[#5213]*[#5213]]]
      (LOGAPPEND,probe_results.txt)
      (LOG,Pocket:)
      (LOG,X:             #5211)
      (LOG,Y:             #5212)
      (LOG,Z:             #5213)
      (LOG,vector length: #<distance_total>)
      (LOG,Diameter:      #1000)
      (LOG,)
      (LOGCLOSE)
      o<probe_pocket> return
    o161 endif
    
          
    o170 if [#1999 EQ 11] (midpoint 1. probe)
      o<probe_midpoint> call
    o170 elseif [#1999 EQ 21] (rotation 1. probe)
      o<probe_rotation> call
    o170 endif


    (if no special state just set 0)
    G10 L2 P#5220 X[#<x_center_probed> + #<workspace_x>]  
    G10 L2 P#5220 Y[#<y_center_probed> + #<workspace_y>]

    o106 if [#<cal_mode> EQ 0]
      (debug,Probed diameter: #1000. Midpoint set to X0 Y0. Use G10 L20 P0 X... Y... in case you need other values.)
    o106 elseif [[#<cal_mode> EQ 1] AND [#<probe_mode> EQ 1]]
      #10 = [#<averaged_diam> + #<tip_diameter>]
      (debug,Calibration mode. Probed diameter is estimated: #10. Do another pocket probe to check calculated values.)
    o106 endif

    o180 if [[#<_hal[pyvcp.reload]>] EQ 1]
      M130 P255 (clear plot and reload file)
    o180 endif
    
    o<probe_pocket> return
  o110 endif

o<probe_pocket> endsub
M2 (end program)
