
# load the realtime components

	loadrt [KINS]KINEMATICS
	loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

	#load remora realtime component
	loadrt remora-spi SPI_clk_div=32 PRU_base_freq=40000
	#load remora PRUencoder component
	loadrt PRUencoder names=encoderS0


# estop loopback, SPI comms enable and feedback
	net user-enable-out 	<= iocontrol.0.user-enable-out		=> remora.SPI-enable
	net user-request-enable <= iocontrol.0.user-request-enable	=> remora.SPI-reset
	net remora-status 	<= remora.SPI-status 			=> iocontrol.0.emc-enable-in
	

# add the remora and motion functions to threads
	addf remora.read servo-thread
	addf PRUencoder.capture-position servo-thread
	addf motion-command-handler servo-thread
	addf motion-controller servo-thread
	addf remora.update-freq servo-thread
	addf remora.write servo-thread
	
# Joint 0 setup

	setp remora.joint.0.scale 		[JOINT_0]SCALE
	setp remora.joint.0.maxaccel 	[JOINT_0]STEPGEN_MAXACCEL
	setp remora.joint.0.deadband 	[JOINT_0]DEADBAND
	setp remora.joint.0.pgain 		[JOINT_0]P_GAIN
	setp remora.joint.0.ff1gain 	[JOINT_0]FF1_GAIN


	net xpos-cmd 		<= joint.0.motor-pos-cmd 	=> remora.joint.0.pos-cmd  
	net j0pos-fb 		<= remora.joint.0.pos-fb 	=> joint.0.motor-pos-fb
	net j0enable 		<= joint.0.amp-enable-out 	=> remora.joint.0.enable
	


# Joint 1 setup

	setp remora.joint.1.scale 		[JOINT_1]SCALE
	setp remora.joint.1.maxaccel 	[JOINT_1]STEPGEN_MAXACCEL
	setp remora.joint.1.deadband 	[JOINT_1]DEADBAND
	setp remora.joint.1.pgain 		[JOINT_1]P_GAIN
	setp remora.joint.1.ff1gain 	[JOINT_1]FF1_GAIN

	net j1pos-cmd 		<= joint.1.motor-pos-cmd 	=> remora.joint.1.pos-cmd
	net j1pos-fb 		<= remora.joint.1.pos-fb 	=> joint.1.motor-pos-fb 
	net j1enable 		<= joint.1.amp-enable-out 	=> remora.joint.1.enable

# Joint 2 setup

	setp remora.joint.2.scale 		[JOINT_2]SCALE
	setp remora.joint.2.maxaccel 	[JOINT_2]STEPGEN_MAXACCEL
	setp remora.joint.2.deadband 	[JOINT_2]DEADBAND
	setp remora.joint.2.pgain 		[JOINT_2]P_GAIN
	setp remora.joint.2.ff1gain 	[JOINT_2]FF1_GAIN

	net j2pos-cmd 		<= joint.2.motor-pos-cmd 	=> remora.joint.2.pos-cmd
	net j2pos-fb 		<= remora.joint.2.pos-fb 	=> joint.2.motor-pos-fb
	net j2enable 		<= joint.2.amp-enable-out 	=> remora.joint.2.enable


#######################################################
# end-stops and inputs
#######################################################

	net X_HOME 	remora.input.00 	=> joint.0.home-sw-in 
	net Y_HOME 	remora.input.01 	=> joint.1.home-sw-in 
	net Z_HOME 	remora.input.02 	=> joint.2.home-sw-in 
	#net IN1 	remora.input.03 	#=> 
	net IN2 	remora.input.04 	#=> 
	#net IN3 	remora.input.05 	#=> 
	net USR_BTN	remora.input.06 	#=> 

#######################################################
# stepgen enable and other outputs
#######################################################

	net j0enable => remora.output.00 	
	#net OUT1 	remora.output.01 	#=> 
	#net OUT2 	remora.output.02 	#=> 

#######################################################
# spindle encoder with remora PRUencoder
# note: this config is not using linuxCNC encoder comp,
#  it is using remora PRUencoder comp
#######################################################

# scale encoder output to read in revolutions , 
# example 1024 encoder x4 = 4096, encoder scale = 4096
setp encoderS0.position-scale [SPINDLE_0_ENCODER]ENCODER_SCALE

### connect the hal encoder to linuxcnc ###
# connect PRUencoder rawcount to remora pv count
net encoder-count <= remora.PV.5 => encoderS0.raw_count
# connect PRUencoder index/z to remora input 
net encoder-phaseZ <= remora.input.15 => encoderS0.phase-Z

#######################################################
# do the spindle stuff 
#######################################################

# conenct remora output01 to linuxCNC spindle on/enable
net spindle-on <= spindle.0.on => 	remora.output.01 
# conenct remora out02 to spindle direction
net spindle-cw <= spindle.0.forward =>  remora.output.02 

# connect spindle signals to linuxCNC
net spindle-cmd-rpm     <= spindle.0.speed-out
#net spindle-cmd-rpm-abs <= spindle.0.speed-out-abs
net spindle-cmd-rps     <= spindle.0.speed-out-rps
net spindle-cmd-rps-abs <= spindle.0.speed-out-rps-abs
net spindle-at-speed    => spindle.0.at-speed

### Connect and configure spindle PWM/0-10v signal   ###

# spindle PWM 0-100 control
# load a linuxCNC scale module, 
loadrt scale names=scale_to_rpm.0,scale-rpm
addf scale-rpm servo-thread
# configure spindle rpm to pwm 
# pwm 100 / max rpm = gain number 
setp scale-rpm.gain 0.02 # 100/ rpm (5000) = .02
net spindle-speed-scale spindle.0.speed-out-abs => scale-rpm.in
# connect pwm scale to remora pwm SP.0 
net spindle-speed-abs scale-rpm.out => remora.SP.0

#######################################################
# Beginning of threading related stuff  
#######################################################

# encoder reset control
# hook up motion controller's sync output
net spindle-index-enable encoderS0.index-enable <=> spindle.0.index-enable
# report our revolution count to the motion controller
net spindle-position encoderS0.position => spindle.0.revs

#####  spindle lowpass filter, to smooth velocity output
loadrt lowpass names=lowpass.spindle-encoder-velocity
addf lowpass.spindle-encoder-velocity servo-thread
setp lowpass.spindle-encoder-velocity.gain 0.001
net spindle-velocity-raw <= encoderS0.velocity => lowpass.spindle-encoder-velocity.in
net spindle-velocity <= lowpass.spindle-encoder-velocity.out => spindle.0.speed-in

# Manual toolchange

	loadusr -W hal_manualtoolchange
	net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
	net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
	net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
	net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared





